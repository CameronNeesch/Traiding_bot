+*In[1]:*+
[source, ipython3]
----
# https://python-binance.readthedocs.io/en/latest/overview.html
# https://www.binance.com/en/support/faq/c-6
# https://www.binance.com/en/my/settings/api-management
----


+*In[2]:*+
[source, ipython3]
----
import requests
import numpy as np
import pandas as pd

from binance import Client, ThreadedWebsocketManager, ThreadedDepthCacheManager
from futures_sign import send_signed_request, send_public_request
from cred import KEY, SECRET
----


+*In[3]:*+
[source, ipython3]
----
symbol='ETHUSDT'
client = Client(KEY,SECRET)

----


+*In[4]:*+
[source, ipython3]
----
# Get last 500 kandels 5 minutes for Symbol

def get_futures_klines(symbol,limit=500):
    x = requests.get('https://binance.com/fapi/v1/klines?symbol='+symbol+'&limit='+str(limit)+'&interval=5m')
    df=pd.DataFrame(x.json())
    df.columns=['open_time','open','high','low','close','volume','close_time','d1','d2','d3','d4','d5']
    df=df.drop(['d1','d2','d3','d4','d5'],axis=1)
    df['open']=df['open'].astype(float)
    df['high']=df['high'].astype(float)
    df['low']=df['low'].astype(float)
    df['close']=df['close'].astype(float)
    df['volume']=df['volume'].astype(float)
    return(df)
----


+*In[5]:*+
[source, ipython3]
----
# Open position for Sybol with 

def open_position(symbol,s_l,quantity_l):
    sprice=get_symbol_price(symbol)

    if(s_l=='long'):
        close_price=str(round(sprice*(1+0.01),2))
        params = {
            "batchOrders": [
                {
                    "symbol":symbol,
                    "side": "BUY",
                    "type": "LIMIT",
                    "quantity": str(quantity_l),
                    "timeInForce":"GTC",
                    "price": close_price        

                }
            ]
        }
        responce = send_signed_request('POST', '/fapi/v1/batchOrders', params)
       
    if(s_l=='short'):
        close_price=str(round(sprice*(1-0.01),2))
        params = {
            "batchOrders": [
                {
                    "symbol":symbol,
                    "side": "SELL",
                    "type": "LIMIT",
                    "quantity": str(quantity_l),
                    "timeInForce":"GTC",
                    "price": close_price
                }
           ]
        }
        responce = send_signed_request('POST', '/fapi/v1/batchOrders', params)
        
----


+*In[6]:*+
[source, ipython3]
----
# Close position for symbol with quantity

def close_position(symbol,s_l,quantity_l):
    sprice=get_symbol_price(symbol)

    if(s_l=='long'):
        close_price=str(round(sprice*(1-0.01),2))
        params = {
                    "symbol":symbol,
                    "side": "SELL",
                    "type": "LIMIT",
                    "quantity": str(quantity_l),
                    "timeInForce":"GTC",
                    "price": close_price
                }
        responce = send_signed_request('POST', '/fapi/v1/order', params)
    if(s_l=='short'):
        close_price=str(round(sprice*(1+0.01),2))
        params = {
                
                    "symbol":symbol,
                    "side": "BUY",
                    "type": "LIMIT",
                    "quantity": str(quantity_l),
                    "timeInForce":"GTC",
                    "price": close_price        
                }
        responce = send_signed_request('POST', '/fapi/v1/order', params)


----


+*In[7]:*+
[source, ipython3]
----
# Find all opened positions

def get_opened_positions(symbol):
    status = client.futures_account()
    positions=pd.DataFrame(status['positions'])
    a = positions[positions['symbol']==symbol]['positionAmt'].astype(float).tolist()[0]
    leverage = int(positions[positions['symbol']==symbol]['leverage'])
    entryprice = positions[positions['symbol']==symbol]['entryPrice']
    profit = float(status['totalUnrealizedProfit'])
    balance = round(float(status['totalWalletBalance']),2)
    if a>0:
        pos = "long"
    elif a<0:
        pos = "short"
    else: 
        pos = ""
    return([pos,a,profit,leverage,balance,round(float(entryprice),3),0])



----


+*In[8]:*+
[source, ipython3]
----
# Close all orders 

def check_and_close_orders(symbol):
    global isStop 
    a=client.futures_get_open_orders(symbol=symbol)
    if len(a)>0:
        isStop = False
        client.futures_cancel_all_open_orders(symbol=symbol)
----


+*In[21]:*+
[source, ipython3]
----
def get_symbol_price(symbol):
    prices = client.get_all_tickers()
    df=pd.DataFrame(prices)
    return float(df[ df['symbol']==symbol]['price'])
----


+*In[22]:*+
[source, ipython3]
----
# Balance in USDT

balance=client.futures_account_balance()
print(balance[6]['balance'])
allusdt=float(balance[6]['balance'])
----


+*Out[22]:*+
----
20.82778245
----


+*In[25]:*+
[source, ipython3]
----
quantity_l=10*allusdt*0.9
----


+*In[27]:*+
[source, ipython3]
----
print(quantity_l)
----


+*Out[27]:*+
----
187.45004205
----


+*In[28]:*+
[source, ipython3]
----
# Order size

def get_symbol_price(symbol):
    prices = client.get_all_tickers()
    df=pd.DataFrame(prices)
    return float(df[ df['symbol']==symbol]['price'])
----


+*In[31]:*+
[source, ipython3]
----
order_size=round(float(quantity_l/get_symbol_price(symbol)),4)
----


+*In[34]:*+
[source, ipython3]
----
print(order_size)
----


+*Out[34]:*+
----
0.0426
----


+*In[ ]:*+
[source, ipython3]
----
open_position(symbol,'short',0.01)
----


+*In[18]:*+
[source, ipython3]
----
open_position(symbol,'short',order_size)
----


+*In[19]:*+
[source, ipython3]
----
get_opened_positions(symbol)
----


+*Out[19]:*+
----['short', -0.01, -0.00837075, 10, 20.82, 4381.97, 0]----


+*In[33]:*+
[source, ipython3]
----

----
